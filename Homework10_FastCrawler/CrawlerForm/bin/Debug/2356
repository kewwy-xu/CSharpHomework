<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="1.缩短键值对的存储长度 键值对的长度是和性能成反比的，比如我们来做一组写入数据的性能测试，执行结果如下： 从以上数据可以看出，在 key 不变的情况下，value 值越大操作效率越慢，因为 Redi" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>吊打面试官系列：Redis 性能优化的 13 条军规大全 - 八重樱 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey.min.css?v=Fx4xdLkGuHnlaG7xntG_wAnZrnorJWp5u_TWKqbvMF0" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/blacklowkey/bundle-blacklowkey-mobile.min.css?v=cYvlxMu_nd6MVfg-vi7YqOC6FaZ7VHFsDM166vO_ekA" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/a609251438/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/a609251438/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/a609251438/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 557004;
        var currentBlogApp = 'a609251438';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BlackLowKey';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/a609251438/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/a609251438/">Raylove</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/a609251438/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%85%AB%E9%87%8D%E6%A8%B1">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/a609251438/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
257&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
19</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/a609251438/p/12751828.html">吊打面试官系列：Redis 性能优化的 13 条军规大全</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <h2><span style="font-size: 1.5em;">1.缩短键值对的存储长度</span></h2>
<p>键值对的长度是和性能成反比的，比如我们来做一组写入数据的性能测试，执行结果如下：</p>
<p><img class="origin_image zh-lightbox-thumb lazy" src="https://pic4.zhimg.com/80/v2-ea6b0bc22b31b3b8d99af4e92f326663_720w.jpg" alt="" width="651" data-caption="" data-size="normal" data-rawwidth="651" data-rawheight="312" data-original="https://pic4.zhimg.com/v2-ea6b0bc22b31b3b8d99af4e92f326663_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-ea6b0bc22b31b3b8d99af4e92f326663_b.jpg" data-lazy-status="ok"></p>
<p>从以上数据可以看出，在 key 不变的情况下，value 值越大操作效率越慢，因为 Redis 对于同一种数据类型会使用不同的内部编码进行存储，比如字符串的内部编码就有三种：<br />int（整数编码）<br />raw（优化内存分配的字符串编码）<br />embstr（动态字符串编码），这是因为 Redis 的作者是想通过不同编码实现效率和空间的平衡，然而数据量越大使用的内部编码就越复杂，而越是复杂的内部编码存储的性能就越低。</p>
<p>这还只是写入时的速度，当键值对内容较大时，还会带来另外几个问题：</p>
<ul>
<li>&middot; 内容越大需要的持久化时间就越长，需要挂起的时间越长，Redis 的性能就会越低；</li>
<li>&middot; 内容越大在网络上传输的内容就越多，需要的时间就越长，整体的运行速度就越低；</li>
<li>&middot; 内容越大占用的内存就越多，就会更频繁的触发内存淘汰机制，从而给 Redis 带来了更多的运行负担。</li>

</ul>
<p>因此在保证完整语义的同时，我们要尽量的缩短键值对的存储长度，必要时要对数据进行序列化和压缩再存储。</p>
<h2>2.使用 lazy free 特性</h2>
<p>lazy free 特性是 Redis 4.0 新增的一个非常使用的功能，它可以理解为惰性删除或延迟删除。意思是在删除的时候提供异步延时释放键值的功能，把键值释放操作放在 BIO(Background I/O) 单独的子线程处理中，以减少删除删除对 Redis 主线程的阻塞，可以有效地避免删除 big key 时带来的性能和可用性问题。</p>
<p>lazy free 对应了 4 种场景，默认都是关闭的：</p>
<p>lazyfree-lazy-eviction no</p>
<p>lazyfree-lazy-expire no</p>
<p>lazyfree-lazy-server-del no</p>
<p>slave-lazy-flush no</p>
<p>它们代表的含义如下：</p>
<ul>
<li>&middot; lazyfree-lazy-eviction：表示当 Redis 运行内存超过 maxmeory 时，是否开启 lazy free 机制删除；</li>
<li>&middot; lazyfree-lazy-expire：表示设置了过期时间的键值，当过期之后是否开启 lazy free 机制删除；</li>
<li>&middot; lazyfree-lazy-server-del：有些指令在处理已存在的键时，会带有一个隐式的 del 键的操作，比如 rename 命令，当目标键已存在，Redis 会先删除目标键，如果这些目标键是一个 big key，就会造成阻塞删除的问题，此配置表示在这种场景中是否开启 lazy free 机制删除；</li>
<li>&middot; slave-lazy-flush：针对 slave(从节点) 进行全量数据同步，slave 在加载 master 的 RDB 文件前，会运行 flushall 来清理自己的数据，它表示此时是否开启 lazy free 机制删除。</li>

</ul>
<p>建议开启其中的 lazyfree-lazy-eviction、lazyfree-lazy-expire、lazyfree-lazy-server-del 等配置，这样就可以有效的提高主线程的执行效率。</p>
<h2>3.设置键值的过期时间</h2>
<p>我们应该根据实际的业务情况，对键值设置合理的过期时间，这样 Redis 会帮你自动清除过期的键值对，以节约对内存的占用，以避免键值过多的堆积，频繁的触发内存淘汰策略。</p>
<h2>4.禁用长耗时的查询命令</h2>
<p>Redis 绝大多数读写命令的时间复杂度都在 O(1) 到 O(N) 之间，在官方文档对每命令都有时间复杂度说明</p>
<p>
<img class="origin_image zh-lightbox-thumb lazy" src="https://pic3.zhimg.com/80/v2-73d1dca441ac3c0e9bbb04037bb5c946_720w.jpg" alt="" width="660" data-caption="" data-size="normal" data-rawwidth="660" data-rawheight="219" data-original="https://pic3.zhimg.com/v2-73d1dca441ac3c0e9bbb04037bb5c946_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-73d1dca441ac3c0e9bbb04037bb5c946_b.jpg" data-lazy-status="ok"></p>
<p>其中 O(1) 表示可以安全使用的，而 O(N) 就应该当心了，N 表示不确定，数据越大查询的速度可能会越慢。因为 Redis 只用一个线程来做数据查询，如果这些指令耗时很长，就会阻塞 Redis，造成大量延时。</p>
<p>要避免 O(N) 命令对 Redis 造成的影响，可以从以下几个方面入手改造：</p>
<ul>
<li>&middot; 决定禁止使用 keys 命令；</li>
<li>&middot; 避免一次查询所有的成员，要使用 scan 命令进行分批的，游标式的遍历；</li>
<li>&middot; 通过机制严格控制 Hash、Set、Sorted Set 等结构的数据大小；</li>
<li>&middot; 将排序、并集、交集等操作放在客户端执行，以减少 Redis 服务器运行压力；</li>
<li>&middot; 删除 (del) 一个大数据的时候，可能会需要很长时间，所以建议用异步删除的方式 unlink，它会启动一个新的线程来删除目标数据，而不阻塞 Redis 的主线程。</li>

</ul>
<h2>5.使用 slowlog 优化耗时命令</h2>
<ul>
<li>我们可以使用 slowlog 功能找出最耗时的 Redis 命令进行相关的优化，以提升 Redis 的运行速度，慢查询有两个重要的配置项：</li>
<li>&middot; slowlog-log-slower-than ：用于设置慢查询的评定时间，也就是说超过此配置项的命令，将会被当成慢操作记录在慢查询日志中，它执行单位是微秒 (1 秒等于 1000000 微秒)；</li>
<li>&middot; slowlog-max-len ：用来配置慢查询日志的最大记录数。</li>

</ul>
<p>我们可以根据实际的业务情况进行相应的配置，其中慢日志是按照插入的顺序倒序存入慢查 询日志中，我们可以使用 slowlog get n 来获取相关的慢查询日志，再找到这些慢查询对应的业务进行相关的优化。</p>
<h2>6.使用 Pipeline 批量操作数据</h2>
<p>Pipeline (管道技术) 是客户端提供的一种批处理技术，用于一次处理多个 Redis 命令，从而提高整个交互的性能。</p>
<h2>7.避免大量数据同时失效</h2>
<p>Redis 过期键值删除使用的是贪心策略，它每秒会进行 10 次过期扫描，此配置可在 redis.conf 进行配置，默认值是 hz 10，Redis 会随机抽取 20 个值，删除这 20 个键中过期的键，如果过期 key 的比例超过 25% ，重复执行此流程，如下图所示：</p>
<p>
<img class="origin_image zh-lightbox-thumb lazy" src="https://pic3.zhimg.com/80/v2-79ef5fe56fefc1aa3bb69f47860b35e6_720w.jpg" alt="" width="574" data-caption="" data-size="normal" data-rawwidth="574" data-rawheight="883" data-original="https://pic3.zhimg.com/v2-79ef5fe56fefc1aa3bb69f47860b35e6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-79ef5fe56fefc1aa3bb69f47860b35e6_b.jpg" data-lazy-status="ok"></p>
<p>如果在大型系统中有大量缓存在同一时间同时过期，那么会导致 Redis 循环多次持续扫描删除过期字典，直到过期字典中过期键值被删除的比较稀疏为止，而在整个执行过程会导致 Redis 的读写出现明显的卡顿，卡顿的另一种原因是内存管理器需要频繁回收内存页，因此也会消耗一定的 CPU。</p>
<p>为了避免这种卡顿现象的产生，需要预防大量的缓存在同一时刻一起过期，就简单的解决方案就是在过期时间的基础上添加一个指定范围的随机数。</p>
<h2>8.客户端使用优化</h2>
<p>在客户端的使用上我们除了要尽量使用 Pipeline 的技术外，还需要注意要尽量使用 Redis 连接池，而不是频繁创建销毁 Redis 连接，这样就可以减少网络传输次数和减少了非必要调用指令。</p>
<h2>9.限制 Redis 内存大小</h2>
<p>在 64 位操作系统中 Redis 的内存大小是没有限制的，也就是配置项 maxmemory &lt;bytes&gt; 是被注释掉的，这样就会导致在物理内存不足时，使用 swap 空间既交换空间，而当操心系统将 Redis 所用的内存分页移至 swap 空间时，将会阻塞 Redis 进程，导致 Redis 出现延迟，从而影响 Redis 的整体性能。因此我们需要限制 Redis 的内存大小为一个固定的值，当 Redis 的运行到达此值时会触发内存淘汰策略，内存淘汰策略在 Redis 4.0 之后有 8 种：</p>
<p>1.&nbsp;noeviction：不淘汰任何数据，当内存不足时，新增操作会报错，Redis 默认内存淘汰策略；</p>
<p>2.&nbsp;allkeys-lru：淘汰整个键值中最久未使用的键值；</p>
<p>3.&nbsp;allkeys-random：随机淘汰任意键值;</p>
<p>1.&nbsp;volatile-lru：淘汰所有设置了过期时间的键值中最久未使用的键值；</p>
<p>2.&nbsp;volatile-random：随机淘汰设置了过期时间的任意键值；</p>
<p>3.&nbsp;volatile-ttl：优先淘汰更早过期的键值。</p>
<h2>在 Redis 4.0 版本中又新增了 2 种淘汰策略：</h2>
<p>1.&nbsp;volatile-lfu：淘汰所有设置了过期时间的键值中，最少使用的键值；</p>
<p>2.&nbsp;allkeys-lfu：淘汰整个键值中最少使用的键值。</p>
<p>其中 allkeys-xxx 表示从所有的键值中淘汰数据，而 volatile-xxx 表示从设置了过期键的键值中淘汰数据。</p>
<p>我们可以根据实际的业务情况进行设置，默认的淘汰策略不淘汰任何数据，在新增时会报错。</p>
<h2>10.使用物理机而非虚拟机</h2>
<p>在虚拟机中运行 Redis 服务器，因为和物理机共享一个物理网口，并且一台物理机可能有多个虚拟机在运行，因此在内存占用上和网络延迟方面都会有很糟糕的表现，我们可以通过 ./redis-cli --intrinsic-latency 100 命令查看延迟时间，如果对 Redis 的性能有较高要求的话，应尽可能在物理机上直接部署 Redis 服务器。</p>
<h2>11.检查数据持久化策略</h2>
<p>Redis 的持久化策略是将内存数据复制到硬盘上，这样才可以进行容灾恢复或者数据迁移，但维护此持久化的功能，需要很大的性能开销。</p>
<p>在 Redis 4.0 之后，Redis 有 3 种持久化的方式：</p>
<p>&middot; RDB（Redis DataBase，快照方式）将某一个时刻的内存数据，以二进制的方式写入磁盘；</p>
<p>&middot; AOF（Append Only File，文件追加方式），记录所有的操作命令，并以文本的形式追加到文件中；</p>
<p>&middot; 混合持久化方式，Redis 4.0 之后新增的方式，混合持久化是结合了 RDB 和 AOF 的优点，在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，再将后续的操作命令以 AOF 的格式存入文件，这样既能保证 Redis 重启时的速度，又能减低数据丢失的风险。</p>
<p>RDB 和 AOF 持久化各有利弊，RDB 可能会导致一定时间内的数据丢失，而 AOF 由于文件较大则会影响 Redis 的启动速度，为了能同时拥有 RDB 和 AOF 的优点，Redis 4.0 之后新增了混合持久化的方式，因此我们在必须要进行持久化操作时，应该选择混合持久化的方式。</p>
<p>查询是否开启混合持久化可以使用 config get aof-use-rdb-preamble 命令，执行结果如下图所示：</p>
<p>
<img class="origin_image zh-lightbox-thumb lazy" src="https://pic4.zhimg.com/80/v2-05d0750b3642fa995a4873782629f54f_720w.jpg" alt="" width="653" data-caption="" data-size="normal" data-rawwidth="653" data-rawheight="180" data-original="https://pic4.zhimg.com/v2-05d0750b3642fa995a4873782629f54f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-05d0750b3642fa995a4873782629f54f_b.jpg" data-lazy-status="ok"><img class="origin_image zh-lightbox-thumb lazy" src="https://pic3.zhimg.com/80/v2-01fa483ef263365d2e01f927dddfbe4e_720w.jpg" alt="" width="655" data-caption="" data-size="normal" data-rawwidth="655" data-rawheight="215" data-original="https://pic3.zhimg.com/v2-01fa483ef263365d2e01f927dddfbe4e_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-01fa483ef263365d2e01f927dddfbe4e_b.jpg" data-lazy-status="ok"></p>
<p>命令行设置配置的缺点是重启 Redis 服务之后，设置的配置就会失效。</p>
<h3>② 通过修改 Redis 配置文件开启</h3>
<p>在 Redis 的根路径下找到 redis.conf 文件，把配置文件中的 aof-use-rdb-preamble no 改为 aof-use-rdb-preamble yes 如下图所示：</p>
<p>
<img class="origin_image zh-lightbox-thumb lazy" src="https://pic2.zhimg.com/80/v2-889daf41b47a4d51147f10aef3caf629_720w.jpg" alt="" width="654" data-caption="" data-size="normal" data-rawwidth="654" data-rawheight="145" data-original="https://pic2.zhimg.com/v2-889daf41b47a4d51147f10aef3caf629_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-889daf41b47a4d51147f10aef3caf629_b.jpg" data-lazy-status="ok"></p>
<p>配置完成之后，需要重启 Redis 服务器，配置才能生效，但修改配置文件的方式，在每次重启 Redis 服务之后，配置信息不会丢失。</p>
<p>需要注意的是，在非必须进行持久化的业务中，可以关闭持久化，这样可以有效的提升 Redis 的运行速度，不会出现间歇性卡顿的困扰。</p>
<h2>12.禁用 THP 特性</h2>
<p>Linux kernel 在 2.6.38 内核增加了 Transparent Huge Pages (THP) 特性 ，支持大内存页 2MB 分配，默认开启。</p>
<p>当开启了 THP 时，fork 的速度会变慢，fork 之后每个内存页从原来 4KB 变为 2MB，会大幅增加重写期间父进程内存消耗。同时每次写命令引起的复制内存页单位放大了 512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。例如简单的 incr 命令也会出现在慢查询中，因此 Redis 建议将此特性进行禁用，禁用方法如下：</p>
<p>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</p>
<p>为了使机器重启后 THP 配置依然生效，可以在 /etc/rc.local 中追加&nbsp;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled。</p>
<h2>13.使用分布式架构来增加读写速度</h2>
<p>Redis 分布式架构有三个重要的手段：</p>
<ul>
<li>&middot; 主从同步</li>
<li>&middot; 哨兵模式</li>
<li>&middot; Redis Cluster 集群</li>

</ul>
<p>使用主从同步功能我们可以把写入放到主库上执行，把读功能转移到从服务上，因此就可以在单位时间内处理更多的请求，从而提升的 Redis 整体的运行速度。</p>
<p>而哨兵模式是对于主从功能的升级，但当主节点奔溃之后，无需人工干预就能自动恢复 Redis 的正常使用。</p>
<p>Redis Cluster 是 Redis 3.0 正式推出的，Redis 集群是通过将数据库分散存储到多个节点上来平衡各个节点的负载压力。</p>
<p>Redis Cluster 采用虚拟哈希槽分区，所有的键根据哈希函数映射到 0 ~ 16383 整数槽内，计算公式：slot = CRC16(key) &amp; 16383，每一个节点负责维护一部分槽以及槽所映射的键值数据。这样 Redis 就可以把读写压力从一台服务器，分散给多台服务器了，因此性能会有很大的提升。</p>
<p>在这三个功能中，我们只需要使用一个就行了，毫无疑问 Redis Cluster 应该是首选的实现方案，它可以把读写压力自动的分担给更多的服务器，并且拥有自动容灾的能力。</p>
<p class="ztext-empty-paragraph">&nbsp;</p>
<p>更多学习内容请访问：</p>
<p>
<a class="LinkCard LinkCard--hasImage" href="https://zhuanlan.zhihu.com/p/102278033" target="_blank" data-draft-node="block" data-draft-type="link-card" data-image="https://pic3.zhimg.com/zhihu-card-default_ipico.jpg" data-za-detail-view-id="172"><span class="LinkCard-backdrop"><span class="LinkCard-content"><span class="LinkCard-text"><span class="LinkCard-title" data-text="true">腾讯T3-T4标准精品PHP架构师教程目录大全，只要你看完保证薪资上升一个台阶（持续更新）<span class="LinkCard-meta"><br /></span></span></span></span></span></a></p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-22 14:22</span>&nbsp;
<a href="https://www.cnblogs.com/a609251438/">八重樱</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12751828" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12751828);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 557004, cb_blogApp = 'a609251438', cb_blogUserGuid = '09ab19f8-f95d-4bb5-26bc-08d75c4cd385';
    var cb_entryId = 12751828, cb_entryCreatedDate = '2020-04-22 14:22', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 八重樱
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
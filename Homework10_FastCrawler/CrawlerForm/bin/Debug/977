<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="django_day02 外键 表示一对多 多对一 用span标签渲染错误信息 编辑图书时要页面包含原始数据 ctrl&#x2B;shift&#x2B;减号 闭合所有标签 作者表增删改查 多对多关联 注：当模板系统遇到一" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>django_day02 - DemoLi - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=hlpQ1CJDwwJXDxv2HNauUmW3NjyWzoMaw1uER19SLT0" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/DemoLi/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/DemoLi/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/DemoLi/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 593790;
        var currentBlogApp = 'DemoLi';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/DemoLi/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/DemoLi/">DemoLi</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/DemoLi/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/DemoLi">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/DemoLi/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
27&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
0</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/DemoLi/p/12770010.html">django_day02</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h1 id="django_day02">django_day02</h1>
<h2 id="外键">外键</h2>
<p>表示一对多 多对一</p>
<pre><code class="language-python">class Book(models.Model):
    name = models.CharField(max_length=32)
    publisher = models.ForeignKey('Publisher',on_delete=models.CASCADE())#可以不管类的顺序 默认是级联删除
    # publisher_id = models.ForeignKey(Publisher)#要有数据
    &quot;&quot;&quot;
     on_delete 2.0版本后是必须填的
     	models.CASCADE 级联删除
     	models.PROTECT 保护
     	models.SET(v)  删除后设置为默认值
     	models.SETDEFAULT  删除后设置为默认值
     	models.SET_NULL  删除后设置为Null
     	models.DOTHING  什么都不做
     &quot;&quot;&quot;
</code></pre>
<pre><code class="language-sql">输入set global time_zone = '+8:00';  注意不要漏掉后面的分号），回车，如图：
</code></pre>
<pre><code class="language-python">def book_list(request):
    #查询所有的书籍
    all_book = models.Book.objects.all()
    for book in all_book:
        print(book)
        print(book.name)
        print(book.publisher)#出版社对象
        print(book.publisher_id)#出版社id
        print(book.publisher,book.publisher.name,book.publisher.pk)

    #返回 一个页面  页面中包含有书籍数据
    return HttpResponse('book')
</code></pre>
<p>用span标签渲染错误信息</p>
<p>编辑图书时要页面包含原始数据</p>
<p>ctrl+shift+减号 闭合所有标签</p>
<ul>
<li>
<p>作者表增删改查</p>
<ul>
<li>
<p>多对多关联</p>
<pre><code class="language-python">authors = models.ManyToManyField('Author')
</code></pre>
<pre><code class="language-python">all_authors = models.Author.objects.all()
for author in all_authors:
    print(author.name)
    print(author.id)
    print(author.books,type(author.books))#关系管理对象
    print(author.books.all())#所关联的所有对象
    print('*' * 30)
</code></pre>
<pre><code class="language-python">#post
        #获取表单数据
        author_name = request.POST.get('author_name')
        book_ids = request.POST.getlist('book_ids')#获取多个数据  list
        # print(author_name,book_ids)
        #向数据库提交数据
        #向作者表插入作者信息
        author_obj= models.Author.objects.create(name=author_name)#返回一个插入的对象
        #该作者和提交的书籍绑定多对多的关系
        author_obj.books.set(book_ids)#设置多对多的关系
        return redirect('/author_list/')
</code></pre>
<pre><code class="language-python">def author_del(request):
    pk = request.GET.get('id')
    models.Author.objects.filter(pk=pk).delete()#把书籍的对应关系也删掉  书籍并没有删除
    return redirect('/author_list/')
</code></pre>
<pre><code class="language-python">def template_test(request):
    l = [11, 22, 33]
    d = {&quot;name&quot;: &quot;alex&quot;}

    class Person(object):
        def __init__(self, name, age):
            self.name = name
            self.age = age

        def dream(self):
            return &quot;{} is dream...&quot;.format(self.name)

    Alex = Person(name=&quot;Alex&quot;, age=34)
    Egon = Person(name=&quot;Egon&quot;, age=9000)
    Eva_J = Person(name=&quot;Eva_J&quot;, age=18)

    person_list = [Alex, Egon, Eva_J]
    return render(request, &quot;template_test.html&quot;, {&quot;l&quot;: l, &quot;d&quot;: d, &quot;person_list&quot;: person_list})
</code></pre>
</li>
</ul>
<pre><code class="language-python">{# 取l中的第一个参数 #}
{{ l.0 }}
{# 取字典中key的值 #}
{{ d.name }}
{# 取对象的name属性 #}
{{ person_list.0.name }}
{# .操作只能调用不带参数的方法 #}
{{ person_list.0.dream }}

</code></pre>
<p>注：当模板系统遇到一个（.）时，会按照如下的顺序去查询：</p>
<ol>
<li>在字典中查询</li>
<li>属性或者方法</li>
<li>数字索引</li>
</ol>
</li>
</ul>
<h2 id="filters">Filters</h2>
<ol>
<li>
<p>翻译为过滤器，用来修改变量的显示结果。</p>
<p>语法： {{ value|filter_name:参数 }}</p>
<p>':'左右没有空格没有空格没有空格</p>
<p><strong>default</strong>　　</p>
<pre><code>{{ value|default:&quot;nothing&quot;}}
</code></pre>
<p>如果value值没传的话就显示nothing</p>
<p>注：TEMPLATES的OPTIONS可以增加一个选项：string_if_invalid：'找不到'，可以替代default的的作用。</p>
<p><strong>filesizeformat</strong></p>
<p>将值格式化为一个 “人类可读的” 文件尺寸 （例如 '13 KB', '4.1 MB', '102 bytes', 等等）。例如：</p>
<pre><code>{{ value|filesizeformat }}
</code></pre>
<p>如果 value 是 123456789，输出将会是 117.7 MB。</p>
<p><strong>add</strong></p>
<p>给变量加参数</p>
<pre><code class="language-python">{{ value|add:&quot;2&quot; }}
{{ 4|add:2 }}---6
{{ 4|add:-2 }}--2
{{ '4'|add:'-2' }}--2
{{ 4|add:****2 }}----4****2
数字的加法  字符串和列表的拼接

</code></pre>
<p>value是数字4，则输出结果为6。</p>
<pre><code>{{ first|add:second }}
</code></pre>
<p>如果first是 [1,.2,3] ，second是 [4,5,6] ，那输出结果是 [1,2,3,4,5,6] 。</p>
<p><strong>lower</strong></p>
<p>小写</p>
<pre><code>{{ value|lower }}
</code></pre>
<p><strong>upper</strong></p>
<p>大写</p>
<pre><code>{{ value|upper}}
</code></pre>
<p><strong>title</strong></p>
<p>标题</p>
<pre><code>{{ value|title }}
</code></pre>
<p><strong>ljust</strong></p>
<p>左对齐</p>
<pre><code>&quot;{{ value|ljust:&quot;10&quot; }}&quot;
</code></pre>
<p><strong>rjust</strong></p>
<p>右对齐</p>
<pre><code>&quot;{{ value|rjust:&quot;10&quot; }}&quot;
</code></pre>
<p><strong>center</strong></p>
<p>居中</p>
<pre><code>&quot;{{ value|center:&quot;15&quot; }}&quot;
</code></pre>
<p><strong>length</strong></p>
<pre><code>{{ value|length }}
{{ list|add:list|length }}
</code></pre>
<p>返回value的长度，如 value=['a', 'b', 'c', 'd']的话，就显示4.</p>
<p><strong>slice</strong>　　</p>
<p>切片</p>
<pre><code>{{value|slice:&quot;2:-1&quot;}}
{{value|slice:&quot;2:-1:-1}}#可以加步长
</code></pre>
<p><strong>first</strong></p>
<p>取第一个元素</p>
<pre><code>{{ value|first }}
</code></pre>
<p><strong>last</strong></p>
<p>取最后一个元素</p>
<pre><code>{{ value|last }}
</code></pre>
<p><strong>join</strong></p>
<p>使用字符串拼接列表。同python的str.join(list)。</p>
<pre><code>{{ value|join:&quot; // &quot; }}
</code></pre>
<p><strong>truncatechars</strong></p>
<p>如果字符串字符多于指定的字符数量，那么会被截断。截断的字符串将以可翻译的省略号序列（“...”）结尾。</p>
<p>参数：截断的字符数</p>
<pre><code>{{ value|truncatechars:9}}#算上三个点
{{ value|truncatewords:9}}#不包含3个点
</code></pre>
<p><strong>date</strong></p>
<p>日期格式化</p>
<pre><code class="language-python">{{ value|date:&quot;Y-m-d H:i:s&quot;}}#不需要%
%Y-%m-%d
%H-%M-%S
#settings配置
USE_L10N = False

USE_TZ = True
DATETIME_FORMAT = 'Y-m-d H:i:s'#时间格式化
TIME_FORMAT = 'H:i:s'#时间
DATE_FORMAT = 'Y-m-d'#日期
</code></pre>
<p>可格式化输出的字符：<a href="https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#date">点击查看</a>。</p>
<p><strong>safe</strong></p>
<p>Django的模板中会对HTML标签和JS等语法标签进行自动转义，原因显而易见，这样是为了安全。但是有的时候我们可能不希望这些HTML元素被转义，比如我们做一个内容管理系统，后台添加的文章中是经过修饰的，这些修饰可能是通过一个类似于FCKeditor编辑加注了HTML修饰符的文本，如果自动转义的话显示的就是保护HTML标签的源文件。为了在Django中关闭HTML的自动转义有两种方式，如果是一个单独的变量我们可以通过过滤器“|safe”的方式告诉Django这段代码是安全的不必转义。</p>
<p>比如：</p>
<p>value = &quot;<a href='#'>点我</a>&quot;</p>
<pre><code>{{ value|safe}}

</code></pre>
</li>
</ol>
<h2 id="自定义filter"><strong>自定义filter</strong></h2>
<p>自定义过滤器只是带有一个或两个参数的Python函数:</p>
<ul>
<li>在app下创建一个名为templatetags的python包(<strong>包的名字不能错</strong>)</li>
<li>创建一个python文件  文件名自定义</li>
</ul>
<ul>
<li>变量（输入）的值 - -不一定是一个字符串</li>
<li>参数的值 - 这可以有一个默认值，或完全省略</li>
</ul>
<p>例如，在过滤器{{var | foo：“bar”}}中，过滤器<strong>foo</strong>将传递变量<strong>var</strong>和参数<strong>“bar”</strong>。</p>
<p>自定义filter代码文件摆放位置：</p>
<pre><code>app01/
    __init__.py
    models.py
    templatetags/  # 在app01下面新建一个package package
        __init__.py
        app01_filters.py  # 建一个存放自定义filter的py文件
    views.py
</code></pre>
<p>编写自定义filter</p>
<pre><code class="language-python">from django import template
register = template.Library()#register的名字不能错
#写函数+装饰器
@register.filter
def fill(value, arg):
    return value.replace(&quot; &quot;, arg)

@register.filter(name=&quot;addSB&quot;)
def add_sb(value):
    return &quot;{} SB&quot;.format(value)
</code></pre>
<p>使用自定义filter  写函数+装饰器</p>
<pre><code>{# 先导入我们自定义filter那个文件 #}
{% load app01_filters %}

{# 使用我们自定义的filter #}
{{ somevariable|fill:&quot;__&quot; }}
{{ d.name|addSB }}
</code></pre>
<h3 id="tags"><strong>Tags</strong></h3>
<p><strong>for</strong></p>
<pre><code>&lt;ul&gt;
{% for user in user_list %}
    &lt;li&gt;{{ user.name }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</code></pre>
<p>for循环可用的一些参数：</p>
<table>
<thead>
<tr>
<th>Variable</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>forloop.counter</code></td>
<td>当前循环的索引值（从1开始）</td>
</tr>
<tr>
<td><code>forloop.counter0</code></td>
<td>当前循环的索引值（从0开始）</td>
</tr>
<tr>
<td><code>forloop.revcounter</code></td>
<td>当前循环的倒序索引值（到1结束）</td>
</tr>
<tr>
<td><code>forloop.revcounter0</code></td>
<td>当前循环的倒序索引值（到0结束）</td>
</tr>
<tr>
<td><code>forloop.first</code></td>
<td>当前循环是不是第一次循环（布尔值）</td>
</tr>
<tr>
<td><code>forloop.last</code></td>
<td>当前循环是不是最后一次循环（布尔值）</td>
</tr>
<tr>
<td><code>forloop.parentloop</code></td>
<td>本层循环的外层循环</td>
</tr>
</tbody>
</table>
<p><strong>for ... empty</strong></p>
<pre><code>&lt;ul&gt;
{% for user in user_list %}
    &lt;li&gt;{{ user.name }}&lt;/li&gt;
{% empty %}
    &lt;li&gt;空空如也&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</code></pre>
<p><strong>if,elif和else</strong></p>
<pre><code>{% if user_list %}
  用户人数：{{ user_list|length }}
{% elif black_list %}
  黑名单数：{{ black_list|length }}
{% else %}
  没有用户
{% endif %}
</code></pre>
<p><strong>当然也可以只有if和else</strong></p>
<pre><code>{% if user_list|length &gt; 5 %}
  七座豪华SUV
{% else %}
    黄包车
{% endif %}
</code></pre>
<p>if语句支持 and 、or、==、&gt;、&lt;、!=、&lt;=、&gt;=、in、not in、is、is not判断。</p>
<p><strong>with</strong></p>
<p>定义一个中间变量</p>
<pre><code>{% with total=business.employees.count %}
    {{ total }} employee{{ total|pluralize }}
{% endwith %}
</code></pre>
<h3 id="csrf_token">csrf_token</h3>
<p>这个标签用于跨站请求伪造保护。</p>
<p>在页面的form表单里面写上{% csrf_token %}</p>
<h3 id="注释">注释</h3>
<pre><code>{# ... #}
</code></pre>
<h3 id="注意事项">注意事项</h3>
<p>\1. Django的模板语言不支持连续判断，即不支持以下写法：</p>
<pre><code>{% if a &gt; b &gt; c %}
...
{% endif %}
</code></pre>
<p>\2. Django的模板语言中属性的优先级大于方法</p>
<pre><code>def xx(request):
    d = {&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3, &quot;items&quot;: &quot;100&quot;}
    return render(request, &quot;xx.html&quot;, {&quot;data&quot;: d})
</code></pre>
<p>如上，我们在使用render方法渲染一个页面的时候，传的字典d有一个key是items并且还有默认的 d.items() 方法，此时在模板语言中:</p>
<pre><code>{{ data.items }}
</code></pre>
<p>默认会取d的items key的值。</p>
<p><a href="https://www.cnblogs.com/maple-shaw/articles/9333821.html#_labelTop">回到顶部</a></p>
<h2 id="母板的继承">母板的继承</h2>
<ol>
<li>母版：
<ol>
<li>包含多个页面的公共部分</li>
<li>定义多个block块</li>
</ol>
</li>
<li>继承：
<ol>
<li>{% extends  ‘ 母版的名字 ’ %}</li>
<li>重新写block块</li>
</ol>
</li>
<li>注意
<ol>
<li>{% extends  ‘ 母版的名字 ’ %} 母版的名字带引号</li>
<li>{% extends  ‘ 母版的名字 ’ %} 写在第一行</li>
<li>要显示的内容写在block块中</li>
<li>多写一个css/js的block块</li>
</ol>
</li>
</ol>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=edge&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
  &lt;title&gt;Title&lt;/title&gt;
  {% block page-css %}
  
  {% endblock %}
&lt;/head&gt;
&lt;body&gt;

&lt;h1&gt;这是母板的标题&lt;/h1&gt;

{% block page-main %}

{% endblock %}
&lt;h1&gt;母板底部内容&lt;/h1&gt;
{% block page-js %}

{% endblock %}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>注意：我们通常会在母板中定义页面专用的CSS块和JS块，方便子页面替换。</p>
<p><a href="https://www.cnblogs.com/maple-shaw/articles/9333821.html#_labelTop">回到顶部</a></p>
<h2 id="继承母板">继承母板</h2>
<p>在子页面中在页面最上方使用下面的语法来继承母板。</p>
<pre><code>{% extends 'layouts.html' %}
</code></pre>
<p><a href="https://www.cnblogs.com/maple-shaw/articles/9333821.html#_labelTop">回到顶部</a></p>
<h2 id="块（block）">块（block）</h2>
<p>通过在母板中使用<code>{% block xxx %}</code>来定义&quot;块&quot;。</p>
<p>在子页面中通过定义母板中的block名来对应替换母板中相应的内容。</p>
<pre><code>{% block page-main %}
  &lt;p&gt;世情薄&lt;/p&gt;
  &lt;p&gt;人情恶&lt;/p&gt;
  &lt;p&gt;雨送黄昏花易落&lt;/p&gt;
{% endblock %}
</code></pre>
<h2 id="组件">组件</h2>
<ol>
<li>把一小段公用的HTML文本写入一个HTML文件中 nav.html</li>
<li>在需要该组件的模板中引用</li>
</ol>
<pre><code>{% include 'navbar.html' %}
</code></pre>
<p>可以将常用的页面内容如导航条，页尾信息等组件保存在单独的文件中，然后在需要使用的地方按如下语法导入即可。</p>
<h2 id="静态文件相关">静态文件相关</h2>
<pre><code>{% load static %}
&lt;img src=&quot;{% static &quot;images/hi.jpg&quot; %}&quot; alt=&quot;Hi!&quot; /&gt;
</code></pre>
<p>引用JS文件时使用：</p>
<pre><code>{% load static %}
&lt;script src=&quot;{% static &quot;mytest.js&quot; %}&quot;&gt;&lt;/script&gt;
</code></pre>
<p>某个文件多处被用到可以存为一个变量</p>
<pre><code>{% load static %}
{% static &quot;images/hi.jpg&quot; as myphoto %}
&lt;img src=&quot;{{ myphoto }}&quot;&gt;&lt;/img&gt;
</code></pre>
<h3 id="使用get_static_prefix">使用get_static_prefix</h3>
<pre><code>{% load static %}
&lt;img src=&quot;{% get_static_prefix %}images/hi.jpg&quot; alt=&quot;Hi!&quot; /&gt;
</code></pre>
<p>或者</p>
<pre><code>{% load static %}
{% get_static_prefix as STATIC_PREFIX %}

&lt;img src=&quot;{{ STATIC_PREFIX }}images/hi.jpg&quot; alt=&quot;Hi!&quot; /&gt;
&lt;img src=&quot;{{ STATIC_PREFIX }}images/hi2.jpg&quot; alt=&quot;Hello!&quot; /&gt;
</code></pre>
<h3 id="自定义simpletag">自定义simpletag</h3>
<p>和自定义filter类似，只不过接收更灵活的参数。</p>
<p>定义注册simple tag</p>
<pre><code>@register.simple_tag(name=&quot;plus&quot;)
def plus(a, b, c):
    return &quot;{} + {} + {}&quot;.format(a, b, c)
</code></pre>
<p>使用自定义simple tag</p>
<pre><code>{% load app01_demo %}

{# simple tag #}
{% plus &quot;1&quot; &quot;2&quot; &quot;abc&quot; %}


{% str_join 'a' 'b' 'c' k1='d' k2='e'  %}
</code></pre>
<h3 id="inclusion_tag">inclusion_tag</h3>
<p>多用于返回html代码片段</p>
<p>示例：</p>
<p>templatetags/my_inclusion.py</p>
<pre><code class="language-python">from django import template

register = template.Library()


@register.inclusion_tag('result.html')
def show_results(n):
    n = 1 if n &lt; 1 else int(n)
    data = [&quot;第{}项&quot;.format(i) for i in range(1, n+1)]
    return {&quot;data&quot;: data}
</code></pre>
<pre><code class="language-html">&lt;ul&gt;
  {% for choice in data %}
    &lt;li&gt;{{ choice }}&lt;/li&gt;
  {% endfor %}
&lt;/ul&gt;
</code></pre>
<p>templates/index.html</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=edge&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
  &lt;title&gt;inclusion_tag test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

{% load my_inclusion %}

{% show_results 10 %}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-24 20:54</span>&nbsp;
<a href="https://www.cnblogs.com/DemoLi/">DemoLi</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12770010" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12770010);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 593790, cb_blogApp = 'DemoLi', cb_blogUserGuid = '8b40e6bd-916f-44fa-cb1a-08d7d7b4fe7b';
    var cb_entryId = 12770010, cb_entryCreatedDate = '2020-04-24 20:54', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 DemoLi
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
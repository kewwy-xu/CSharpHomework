<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">博客园_I love .net</title>
  <subtitle type="text"></subtitle>
  <id>uuid:f08bc138-72bc-4174-a5b6-cc0d790b8e73;id=105</id>
  <updated>2020-04-23T21:18:09Z</updated>
  <author>
    <name>Eric zhou</name>
    <uri>http://www.cnblogs.com/tianqing/</uri>
  </author>
  <generator>feed.cnblogs.com</generator>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/12764404.html</id>
    <title type="text">ASP.NET Core技术研究-全面认识Web服务器Kestrel - Eric zhou</title>
    <summary type="text">因为IIS不支持跨平台的原因，我们在升级到ASP.NET Core后，会接触到一个新的Web服务器Kestrel。相信大家刚接触这个Kestrel时，会有各种各样的疑问。 今天我们全面认识一下ASP.NET Core的默认Web服务器Kestrel。 一、初识Kestrel 首先，Kestrel是一</summary>
    <published>2020-04-23T21:08:00Z</published>
    <updated>2020-04-23T21:08:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/12764404.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/12764404.html" />
    <content type="html">【摘要】因为IIS不支持跨平台的原因，我们在升级到ASP.NET Core后，会接触到一个新的Web服务器Kestrel。相信大家刚接触这个Kestrel时，会有各种各样的疑问。 今天我们全面认识一下ASP.NET Core的默认Web服务器Kestrel。 一、初识Kestrel 首先，Kestrel是一 &lt;a href="http://www.cnblogs.com/tianqing/p/12764404.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/12726181.html</id>
    <title type="text">.NET Core技术研究-主机Host - Eric zhou</title>
    <summary type="text">前一段时间，和大家分享了 ASP.NET Core技术研究-探秘Host主机启动过程 但是没有深入说明主机的设计。今天整理了一下主机的一些知识，结合先前的博文，完整地介绍一下.NET Core的主机的设计和构建启动过程。 一、什么是主机 主机是一个封装了应用资源的对象，即：主机封装了一堆应用资源，封</summary>
    <published>2020-04-18T07:58:00Z</published>
    <updated>2020-04-18T07:58:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/12726181.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/12726181.html" />
    <content type="html">【摘要】前一段时间，和大家分享了 ASP.NET Core技术研究-探秘Host主机启动过程 但是没有深入说明主机的设计。今天整理了一下主机的一些知识，结合先前的博文，完整地介绍一下.NET Core的主机的设计和构建启动过程。 一、什么是主机 主机是一个封装了应用资源的对象，即：主机封装了一堆应用资源，封 &lt;a href="http://www.cnblogs.com/tianqing/p/12726181.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/12686245.html</id>
    <title type="text">ASP.NET Core技术研究-探秘依赖注入框架 - Eric zhou</title>
    <summary type="text">ASP.NET Core在底层内置了一个依赖注入框架，通过依赖注入的方式注册服务、提供服务。依赖注入不仅服务于ASP.NET Core自身，同时也是应用程序的服务提供者。 毫不夸张的说，ASP.NET Core通过依赖注入实现了各种服务对象的注册和创建，同时也实现了面向抽象的编程模式和编程体验，提升</summary>
    <published>2020-04-12T10:30:00Z</published>
    <updated>2020-04-12T10:30:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/12686245.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/12686245.html" />
    <content type="html">【摘要】ASP.NET Core在底层内置了一个依赖注入框架，通过依赖注入的方式注册服务、提供服务。依赖注入不仅服务于ASP.NET Core自身，同时也是应用程序的服务提供者。 毫不夸张的说，ASP.NET Core通过依赖注入实现了各种服务对象的注册和创建，同时也实现了面向抽象的编程模式和编程体验，提升 &lt;a href="http://www.cnblogs.com/tianqing/p/12686245.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/12640739.html</id>
    <title type="text">ASP.NET Core技术研究-探秘Host主机启动过程 - Eric zhou</title>
    <summary type="text">当我们将原有ASP.NET 应用程序升级迁移到ASP.NET Core之后，我们发现代码工程中多了两个类Program类和Startup类。 接下来我们详细探秘一下通用主机Host的启动过程。 一、Program类的Main函数入口 Program类最重要的功能就是启动主机，这里有一个主机的概念，是</summary>
    <published>2020-04-06T04:21:00Z</published>
    <updated>2020-04-06T04:21:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/12640739.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/12640739.html" />
    <content type="html">【摘要】当我们将原有ASP.NET 应用程序升级迁移到ASP.NET Core之后，我们发现代码工程中多了两个类Program类和Startup类。 接下来我们详细探秘一下通用主机Host的启动过程。 一、Program类的Main函数入口 Program类最重要的功能就是启动主机，这里有一个主机的概念，是 &lt;a href="http://www.cnblogs.com/tianqing/p/12640739.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/12633780.html</id>
    <title type="text">.NET Core技术研究-中间件的由来和使用 - Eric zhou</title>
    <summary type="text">我们将原有ASP.NET应用升级到ASP.NET Core的过程中，会遇到一个新的概念：中间件。 中间件是ASP.NET Core全新引入的概念。中间件是一种装配到应用管道中以处理请求和响应的软件。 每个组件： 选择是否将请求传递到管道中的下一个组件。 可在管道中的下一个组件前后执行工作。 单独看以</summary>
    <published>2020-04-04T12:49:00Z</published>
    <updated>2020-04-04T12:49:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/12633780.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/12633780.html" />
    <content type="html">【摘要】我们将原有ASP.NET应用升级到ASP.NET Core的过程中，会遇到一个新的概念：中间件。 中间件是ASP.NET Core全新引入的概念。中间件是一种装配到应用管道中以处理请求和响应的软件。 每个组件： 选择是否将请求传递到管道中的下一个组件。 可在管道中的下一个组件前后执行工作。 单独看以 &lt;a href="http://www.cnblogs.com/tianqing/p/12633780.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/12609152.html</id>
    <title type="text">.NET Core技术研究-最实用最常用的配置读取方式 - Eric zhou</title>
    <summary type="text">升级ASP.NET Core后，配置的读取是第一个要明确的技术。原先的App.Config、Web.Config、自定义Config在ASP.NET Core中如何正常使用。有必要好好总结整理一下，相信大家都会用到。 首先，看一下ASP.NET Core中的配置提供程序（Configuration </summary>
    <published>2020-04-01T14:33:00Z</published>
    <updated>2020-04-01T14:33:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/12609152.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/12609152.html" />
    <content type="html">【摘要】升级ASP.NET Core后，配置的读取是第一个要明确的技术。原先的App.Config、Web.Config、自定义Config在ASP.NET Core中如何正常使用。有必要好好总结整理一下，相信大家都会用到。 首先，看一下ASP.NET Core中的配置提供程序（Configuration  &lt;a href="http://www.cnblogs.com/tianqing/p/12609152.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/12570801.html</id>
    <title type="text">.NET Core技术研究-HttpContext访问的正确姿势 - Eric zhou</title>
    <summary type="text">将ASP.NET升级到ASP.NET Core之后，相信大家都会遇到HttpContext.Current无法使用的问题。这也是我们迁移ASP.NET Core必须解决的问题。 本文我们详细讨论一下，使用HttpContext的正确姿势。 先列一下使用HttpContext的具体场景： 1. 在Co</summary>
    <published>2020-03-25T14:51:00Z</published>
    <updated>2020-03-25T14:51:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/12570801.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/12570801.html" />
    <content type="html">【摘要】将ASP.NET升级到ASP.NET Core之后，相信大家都会遇到HttpContext.Current无法使用的问题。这也是我们迁移ASP.NET Core必须解决的问题。 本文我们详细讨论一下，使用HttpContext的正确姿势。 先列一下使用HttpContext的具体场景： 1. 在Co &lt;a href="http://www.cnblogs.com/tianqing/p/12570801.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/12555235.html</id>
    <title type="text">.NET 5 Preview 1的深度解读和跟进 - Eric zhou</title>
    <summary type="text">这几天微软.NET 团队发布了.NET 5 Preview 1, 如约而至。很兴奋，因为.NET Core和.NET Framework终于实现了大一统，同时也很期待，期待.NET 5能给我们带来哪些好的新特性。 让我们先把时间拨回到2019年... 一、2019年.NET 5的提前剧透 去年201</summary>
    <published>2020-03-23T14:44:00Z</published>
    <updated>2020-03-23T14:44:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/12555235.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/12555235.html" />
    <content type="html">【摘要】这几天微软.NET 团队发布了.NET 5 Preview 1, 如约而至。很兴奋，因为.NET Core和.NET Framework终于实现了大一统，同时也很期待，期待.NET 5能给我们带来哪些好的新特性。 让我们先把时间拨回到2019年... 一、2019年.NET 5的提前剧透 去年201 &lt;a href="http://www.cnblogs.com/tianqing/p/12555235.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/11874558.html</id>
    <title type="text">玩转VSCode-完整构建VSCode开发调试环境 - Eric zhou</title>
    <summary type="text">随着VSCode的不断完善和强大，是时候将部分开发迁移到VS Code中了。 目前使用VS2019开发.NET Core应用，一直有一个想法，在VS Code中复刻VS的开发环境，同时迁移到VS Code。 那么现在就开始吧。 首先，安装最新版的VS Code：https://code.visual</summary>
    <published>2019-11-16T15:26:00Z</published>
    <updated>2019-11-16T15:26:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/11874558.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/11874558.html" />
    <content type="html">【摘要】随着VSCode的不断完善和强大，是时候将部分开发迁移到VS Code中了。 目前使用VS2019开发.NET Core应用，一直有一个想法，在VS Code中复刻VS的开发环境，同时迁移到VS Code。 那么现在就开始吧。 首先，安装最新版的VS Code：https://code.visual &lt;a href="http://www.cnblogs.com/tianqing/p/11874558.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
  <entry>
    <id>http://www.cnblogs.com/tianqing/p/11870088.html</id>
    <title type="text">China .NET Conf 2019-.NET技术架构下的混沌工程实践 - Eric zhou</title>
    <summary type="text">这个月的8号、9号，个人很荣幸参加了China.NET Conf 2019 , 中国.NET开发者峰会，同时分享了技术专题《.NET技术架构下的混沌工程实践》，给广大的.NET开发小伙伴介绍混沌工程和高可用性改造实践。会后大家伙聚餐的时候，陈计节老师建议大家将各自的议题分享到社区，分享给大家。因此，</summary>
    <published>2019-11-15T15:10:00Z</published>
    <updated>2019-11-15T15:10:00Z</updated>
    <author>
      <name>Eric zhou</name>
      <uri>http://www.cnblogs.com/tianqing/</uri>
    </author>
    <link rel="alternate" href="http://www.cnblogs.com/tianqing/p/11870088.html" />
    <link rel="alternate" type="text/html" href="http://www.cnblogs.com/tianqing/p/11870088.html" />
    <content type="html">【摘要】这个月的8号、9号，个人很荣幸参加了China.NET Conf 2019 , 中国.NET开发者峰会，同时分享了技术专题《.NET技术架构下的混沌工程实践》，给广大的.NET开发小伙伴介绍混沌工程和高可用性改造实践。会后大家伙聚餐的时候，陈计节老师建议大家将各自的议题分享到社区，分享给大家。因此， &lt;a href="http://www.cnblogs.com/tianqing/p/11870088.html" target="_blank"&gt;阅读全文&lt;/a&gt;</content>
  </entry>
</feed>